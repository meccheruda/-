#

自由にコメントをかける


irb
エンターキーを打つたびに、そこまでの記述を実行して結果を表示
終了するときはexitと記述する
値を簡単に確認するときはirbを使う




メソッド
プログラミングにおける何らかの処理をまとめたもの


lengthメソッド（レングス）
文字列の文字数を数えてくれます
使うときは値に対してメソッド名を「.」でつなぐ
"Hello World".lengthと打てば11文字と教えてくれる

to_sメソッド（トゥーエス）
数値を文字列に変換するメソッド

to_iメソッド（トゥーアイ）
文字列を数値に変換するメソッド


式展開
式展開の書き方は文字列中で#{式}とするだけ
文字列を作るときにダブルクォーテーション"で囲む必要がある



自己代入演算子
自己代入演算子	例	処理
+=	number += 1	numberに1足した値をnumber自身に代入
-=	number -= 2	numberから2引いた値をnumber自身に代入
*=	number *= 3	numberに3かけた値をnumber自身に代入
/=	number /= 4	numberを4で割った値をnumber自身に代入



変数の命名規則

命名規則	説明
変数の中身が何かわかる
どんな名前もつけられますが、aaaのような意味のない名前は避けましょう。

小文字で始める	
大文字からも開始できますが、とくに理由がない場合は避けましょう。

(アンダーバー)で始めない	_からも開始できますが、とくに理由がない場合は避けましょう。
2文字目以降には使えます。

数字で始めない
1文字目に使うとエラーが生じます。
2文字目以降には使えます。

日本語を使わない
文字列以外では日本語は使えないため、変数名も日本語は使えません。

スペースを含めない
名前にスペースが入るとエラーが生じます。

予約語を使用しない
Rubyには文法などで使うことがあらかじめ決まっている単語があり、
それを予約語と呼びます。これらを使うとエラーが生じます。


getsメソッド（ゲッツ）
ターミナル画面は入力待ちの状態

chompメソッド（チョンプ）
getsメソッドで入力された値は、末尾に改行がついた文字列になるため
文字列の末尾に存在する改行を取り除いた文字列を返してくれる


バックスラッシュ記法
記法	意味
\n	改行
\t	タブ
\b	バックスペース
\\	バックスラッシュ

windowsは\



requireメソッド（リクワイア）
Sinatraのような仕組みをRubyファイルに読み込む際はrequireメソッドを使用

HTTPメソッド
HTTP通信の中で行いたい処理の種類をHTTPメソッドといいます
GET	取得する
POST	送信する、作成する
PUT	更新する、作成する
DELETE	削除する
Rubyの構文として<HTTPメソッド> '<URL>' doで開始し、endで終了
sinatraではパスを自由に設定できる


ActiveRecordメソッド（アクティブレコードメソッド）
find　　　1つのレコードのみを取得する
モデル名.find（レコードのID）という形で使用
カラム名とつなげることで特定のカラムの値を取り出すことができる
そのときはモデル名にfindのIDを代入してモデル名.カラム名とすれば出せる

all       すべてのレコードを取得する
モデル名.allという形で使う



メソッド	用途
all	テーブルのすべてのデータを取得する
find	引数にレコードのidを指定し、対応するレコードを取得する
new	クラスのインスタンス（レコード）を生成する
save	クラスのインスタンス（レコード）を保存する



t.に続くのが「型で」：に続くのがカラム名
t.（カラムの型） :(カラム名)
カラムの型
カラムの型	説明
integer	整数型
float	浮動小数点型
decimal	固定小数点型
string	文字列型
text	長文型
datetime	日時型
timestamp	タイムスタンプ型
time	時間型
date	日付型
boolean	真偽値型
binary	バイナリ型
json	JSON型
array	配列型
