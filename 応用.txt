database.yml（データベースヤムル）
このdatabase.ymlを編集したらデータベース設定を運用環境ごとに
変更できます。

運用環境
運用環境には３種類あって
development（ディベロップメント）	開発環境	
主にアプリケーションを開発をする際に使用する環境
test	　　　　　　　　　　　　　　テスト環境	
アプリケーションの動作をテストする際に使用する環境
production	　　　　　　　　　　　本番環境	
アプリケーションを実際にリリースする際に使用する環境

なぜ環境がわかれてるかというと開発環境であれば
「バグを探しやすいツール」などを導入した方が便利ですが、
本番環境ではWebアプリケーションのパフォーマンスを上げるために、
余分なツールは使わない方が適切


データベースの種類
RDB
行と列を持てて表形式でデータ管理するデータベース

RDBMS
RDBを使う際にそれを管理するシステムのことをRDBMSという

MySQL
RDBMSの１つで↓の理由で多くの企業に採用されてる
拡張機能が多い
小規模から大規模のデータも取り扱いが可能
柔軟性が高い


Rubyバージョンの変更
テーブル・カラム情報の変更
Gemの導入状況の変更
をしたときはローカルサーバーの再起動する
なぜならこれらの情報はローカルサーバーを起動するときに
１度だけしか読み込まないから



プログラミングの拡張機能のことをライブラリという
Rubyのライブラリを管理するシステムをRubygemus（ルビージェムズ）という
RubyGemsにはたくさんのライブラリがあり、それぞれをGem（ジェム）と呼
Ruby on Railsアプリケーション内で使用するGemの情報はGemfileというファイルに記載されてる
bundlerによってGemをインストールすると、Gemfile.lockというファイルに記録される
Gemfile.lockはbundle installによってインストール済みとなったGemの情報を記録するファイル
Gemfileはvendorのディレクトリにある


CRUD（クラッド）
クラッドというのは表示とか編集とか削除とかのデータの基本処理をまとめてクラッドという
なぜクラッドというかは４つの処理の頭文字を並べてるからです
create（生成）,Read（読み取り）,Update（更新）,Delete（削除）

そのクラッドには７つのアクションに分割して処理します

アクション名	内容
index	一覧表示
show	詳細表示
new	生成
create	保存
edit	編集
update	更新
destroy	削除

resourcesメソッド（リソーシーズ）routes.rbに記述する
７つのアクションのルーティングを設定するメソッドです
resourcesの引数に、:tweets というシンボルを指定すると
/tweetsのパスに対応するルーティングが生成されます。
 resources :tweets

onlyオプション
resourcesにオプションとしてonlyを加えると、
指定したアクションのみのルーティングを自動生成
例　　　resources :コントローラー名, only: :index
オプション: :追加したいアクションのようにシンボル型でアクション名を記述


レイアウトテンプレート
ビューファイルの共通部分をまとめたもの
headの情報やヘッダー、フッターなどのすべてのビューで
共通となる部分記述しておくファイルです。
Railsの場合はapplication.html.erbというファイルの該当します。（ビューファオリだけど最初からある）

そのレイアウトテンプレートにはすでにheadやbody要素が記述されてて、
body要素の中に記述されてるのがyieldメソッド（イールド）です
このyieldメソッドがあることでbody要素内に各ビューファイルの記述が集約されるという仕組みです
わかりやすくいうとレイアウトテンプレートの
body要素の中にheader要素とfooter要素を追加すれば、
すべてのページでヘッダーとフッターを表示することができます。


stylesheet_link_tagメソッド
読み込むCSSファイルを指定できるヘルパーメソッド
app/assets/stylesheets/のディレクトリに読み込みたいCSSを置く


require_tree（リクワイアツリー）
引数として与えられたディレクトリ以下のCSSファイルをアルファベット順にすべて読み込むという機能を持つ
require_tree .の記述によって、app/assets/stylesheets/という
ディレクトリにあるCSSファイルは、すべてapplication.cssに読み込まれる



ストロングパラメーター
意図しないデータベースの読み書きを防ぐためにつかう
ストロングパラメーターの定義には、requireメソッドと、permitメソッドを組み合わせて使用

requireメソッド
送信されたパラメーターの情報を持つparamsが、使用できるメソッド
params.require(:モデル名)  # 取得したい情報を指定する
requireメソッドによって必要なパラメーターのほとんどを取得できるが、
取得するパラメーターをより意図したものだけに制限するため、
permitメソッドを使用して、カラムに保存したいデータのみに絞る


permitメソッド（パーミット）
requireメソッドと同様に、paramsが使用できるメソッド
params.require(:モデル名).permit(:キー名, :キー名) # 取得したいキーを指定する
permitメソッドを使用すると、取得したいキーを指定でき、指定したキーと値のセットのみを取得

プライベートメソッド
クラス外から呼び出すことのできないメソッド
Rubyでは、privateと記述した後ののコードが全てプライベートメソッド


validatesメソッド（バリデーツ）
バリデーション（制約）を設ける際は、モデルにvalidatesメソッド
例　　　validates :カラム名, バリデーションの種類
validates :name, presence: true
↑だとnameカラムが「空ではないか」というバリデーションを設けてる




before_actionメソッド（ビフォーアクション）
コントローラで定義されたアクションが実行される前に、
共通の処理を行うことができます。
class コントローラ名 < ApplicationController
  before_action :処理させたいメソッド名



